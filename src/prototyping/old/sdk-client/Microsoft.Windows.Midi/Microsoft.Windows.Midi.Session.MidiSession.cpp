#include "pch.h"
#include "Microsoft.Windows.Midi.Session.MidiSession.h"
#include "Microsoft.Windows.Midi.Session.MidiSession.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::Microsoft::Windows::Midi::Session::implementation
{
    winrt::Microsoft::Windows::Midi::Session::MidiSession MidiSession::Create(hstring const& name, winrt::Microsoft::Windows::Midi::Session::MidiSessionCreateOptions const& options)
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Windows::Midi::Session::MidiSession MidiSession::Create(hstring const& name)
    {
        throw hresult_not_implemented();
    }
    winrt::guid MidiSession::Id()
    {
        throw hresult_not_implemented();
    }
    hstring MidiSession::Name()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime MidiSession::CreateTime()
    {
        throw hresult_not_implemented();
    }
    void MidiSession::Close()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Windows::Midi::Devices::MidiEndpoint MidiSession::OpenEndpoint(winrt::Microsoft::Windows::Midi::Enumeration::MidiEndpointInformation const& information)
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Windows::Midi::Devices::MidiEndpoint MidiSession::OpenEndpoint(winrt::guid const& deviceId, winrt::guid const& endpointId)
    {
        throw hresult_not_implemented();
    }
    winrt::event_token MidiSession::MessageReceived(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::Windows::Midi::MidiMessageReceivedEventArgs> const& handler)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::MessageReceived(winrt::event_token const& token) noexcept
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::Microsoft::Windows::Midi::Enumeration::MidiEndpointInformation const& information, winrt::Microsoft::Windows::Midi::Messages::Ump const& message)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::guid const& deviceId, winrt::guid const& endpointId, winrt::Microsoft::Windows::Midi::Messages::Ump const& message)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1, uint32_t word2)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::Microsoft::Windows::Midi::Enumeration::MidiEndpointInformation const& information, winrt::Microsoft::Windows::Midi::Messages::Ump const& message)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::guid const& deviceId, winrt::guid const& endpointId, winrt::Microsoft::Windows::Midi::Messages::Ump const& message)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1, uint32_t word2)
    {
        throw hresult_not_implemented();
    }
    void MidiSession::SendUmpWithJRTimestamp(winrt::guid const& deviceId, winrt::guid const& endpointId, uint32_t word0, uint32_t word1, uint32_t word2, uint32_t word3)
    {
        throw hresult_not_implemented();
    }
    bool MidiSession::UpdateName(hstring const& newName)
    {
        throw hresult_not_implemented();
    }
}
